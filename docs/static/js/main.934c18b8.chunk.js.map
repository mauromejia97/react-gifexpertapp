{"version":3,"sources":["components/AddCategories.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategories","setCategories","useState","imputValue","setimputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","setcategories","cat","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAkBhD,OACI,sBAAMC,SAXY,SAACC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAUH,GAH7C,+DAKKI,MAAMF,GALX,cAKbG,EALa,gBAOIA,EAAUC,OAPd,uBAOXC,EAPW,EAOXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAiBZM,GAjBY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAbAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDhB2BK,CAAa1B,GAAjCa,EAFuB,EAE7BN,KAAca,EAFe,EAEfA,QAEtB,OACI,qCACI,6BAAKpB,IAEJoB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEXxBgB,EAAe,WAAM,MAGMzC,mBAAS,CAAC,cAHhB,mBAGvB0C,EAHuB,KAGXC,EAHW,KAW9B,OACI,gCACI,8CACA,cAAC,EAAD,CAAe5C,cAAe4C,IAC9B,uBAEA,6BAEQD,EAAWnB,KAAI,SAAAqB,GAAG,OACd,cAAC,EAAD,CAEI9B,SAAU8B,GADLA,Y,MCtBjCC,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.934c18b8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategories = ({ setCategories }) => {\r\n\r\n    const [imputValue, setimputValue] = useState(\"\");\r\n\r\n    const handleImputChange = (e) => {\r\n        setimputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubbmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (imputValue.trim().length > 2) {\r\n\r\n            setCategories(cats => [imputValue,...cats]);\r\n            setimputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubbmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={imputValue}\r\n                onChange={handleImputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategories.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","export const getGifs = async (category) => {\r\n\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=mkyFq8ZkCIHcvDKyNbCrbZipoHajowUV`\r\n\r\n    const respuesta = await fetch(url);\r\n\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","/* import React, { useState, useEffect } from 'react' */\r\n/* import { getGifs } from '../helpers/getGifs'; */\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {loading && <p>Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img} />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategories } from './components/AddCategories';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n/* PARA QUE CREE TODO DE UNA SE USA EL SHORTCUT RAFc */\r\n\r\n/* TODOS LOS COMPONENTES EMPIEZAN CON MAYUSCULAS, SINO NO LOS RECONOCE */\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    /* const categories = ['one punch', 'samurai x', 'dragon ball'] */\r\n    const [categories, setcategories] = useState(['Samurai x'])\r\n\r\n    //  const handleAdd = () => {\r\n    //  setcategories([...categories, 'Sword Art Online'])  /* ...categories -- es el estado anterior del array \",\" lo nuevo que quiero agregar*/\r\n    /* setcategories(cats =>[cats,'Sword Art Online']) */ /* ---ES OTRA FORMA --- La funcion Setcategories recibe un Callback en donde 'cats' es el estado anterior y\r\n    despues va los mismo que la linea de arriba */\r\n    //} \r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategories setCategories={setcategories} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(cat => (\r\n                        <GifGrid\r\n                            key={cat}\r\n                            category={cat} />\r\n                        // {/* <li key={category}>{category}</li> */}\r\n                    ))/* LA FUNCION MAP RECIBE 2 PARAMETROS EL QUE ITERA Y EL INDICE  */\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp'\n\nimport './index.css';\n\n\nReactDOM.render(\n\n  <GifExpertApp/>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}